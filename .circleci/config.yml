version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
                
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow_id >> "
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
    
    revert-migrations:
        description: Revert the last migration
        parameters:
            workflow_id:
                type: string      
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      SUCCESS=$(curl --insecure  https://kvdb.io/QKLPKb7NtNNtGNbQL6QPPE/migration_${CIRCLE_WORKFLOW_ID:0:7})
                        # Logic for reverting the database state
                      if (( $SUCCESS == 1 ));
                      then
                          cd ~/project/backend
                          npm install
                          npm run migration:revert 
                      else
                          echo "zero migration."
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install  dependencies and build frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run build 
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and build backend
                  command: |
                    cd backend 
                    npm install
                    npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/backend/dist

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and test frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run test 

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and test backend 
                  command: |
                    cd backend
                    npm install
                    npm run test 
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and scan frontend
                  command: |
                    cd frontend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical 

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and scan backend
                  command: |
                    cd backend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix  --force
                    npm audit --audit-level=critical 

    deploy-infrastructure:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
            - run:     
                  name: Ensure backend infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                      --tags project=udapeople
            - run:
                  name: Ensure frontend infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                      --tags project=udapeople
            - run:
                  name: Add backend ip to ansible inventory
                  command: |
                        aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine
              environment:
                  ANSIBLE_HOST_KEY_CHECKING: "no"
        steps:
            - checkout
            - run:
                  name: Install config dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm ansible zip
                      pip install awscli
            - add_ssh_keys:
                  fingerprints:
                      ["ab:3e:93:98:14:00:f0:37:6e:f4:28:9c:fe:7f:cc:33"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Configure Server
                  command: |
                      cd .circleci/ansible
                      cat inventory.txt
                      ansible-playbook -i inventory.txt configure-server.yml
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                  name: Install dependencies
                  command: |
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install
                      echo aws --version
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run migrations >> migrations_dump.txt
                      cat migrations_dump.txt
            - run:
                  name: Send migration info to kvdb.io 
                  command: |   
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                          curl --insecure https://kvdb.io/QKLPKb7NtNNtGNbQL6QPPE/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                          echo "migration complete -------"
                      else 
                          echo "no migration happened"
                        
                      fi
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations

    deploy-frontend:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout

            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm zip
                      pip install awscli
            - attach_workspace:
                  at: ~/     

            - run:
                  name: Get backend url
                  command: |
                       export BACKEND_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                       export API_URL="http://${BACKEND_IP}:3030"
                       echo "${API_URL}"     
                       echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                       cat frontend/.env   
            - run:
                  name: Build and Deploy frontend objects
                  command: |
                       cd frontend
                       npm install
                       npm run build
                       tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                       aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["ab:3e:93:98:14:00:f0:37:6e:f4:28:9c:fe:7f:cc:33"]
            - attach_workspace:
                at: ~/          
            - run:
                  name: Install dependencies
                  working_directory: /tmp
                  command: |
                      apk add --update ansible curl rsync openssh nodejs npm
                      ansible --version
                      pip install awscli
                      aws --version
           
            - run:
                  name: Package, Deploy Backend and configure prometheus service discovery
                  command: |
                      cd backend
                      npm i
                      npm run build 
                      cd ..
                      tar -C backend -czvf artifact.tar.gz .
                      mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                      mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
                      cd .circleci/ansible
                      echo "contents of the inventory.txt file is ------$(tail -i inventory.txt)"
                      cat inventory.txt
                      export ANSIBLE_HOST_KEY_CHECKING=False
                      ansible-playbook -i inventory.txt deploy-backend.yml
                     
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    
                      

                      
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                  branches:
                    only: [master]
    
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            